import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

interface Post {
  id: string;
  title: string;
  content: string;
  published: boolean;
  createdAt: string;
  updatedAt: string;
  author: {
    id: string;
    email: string;
    username?: string;
  };
  categories: {
    id: string;
    name: string;
  }[];
  tags: {
    id: string;
    name: string;
  }[];
}

interface CreatePostData {
  title: string;
  content: string;
  published?: boolean;
  authorId: string;
}

interface UpdatePostData {
  title?: string;
  content?: string;
  published?: boolean;
}

const GET_POSTS_QUERY = gql`
  query GetPosts {
    posts {
      id
      title
      content
      published
      createdAt
      updatedAt
      author {
        id
        email
        username
      }
      categories {
        id
        name
      }
      tags {
        id
        name
      }
    }
  }
`;

const GET_POST_QUERY = gql`
  query GetPost($id: ID!) {
    post(id: $id) {
      id
      title
      content
      published
      createdAt
      updatedAt
      author {
        id
        email
        username
      }
      categories {
        id
        name
      }
      tags {
        id
        name
      }
    }
  }
`;

const CREATE_POST_MUTATION = gql`
  mutation CreatePost($input: CreatePostInput!) {
    createPost(input: $input) {
      id
      title
      content
      published
      createdAt
      updatedAt
      author {
        id
        email
        username
      }
    }
  }
`;

const UPDATE_POST_MUTATION = gql`
  mutation UpdatePost($id: ID!, $input: UpdatePostInput!) {
    updatePost(id: $id, input: $input) {
      id
      title
      content
      published
      createdAt
      updatedAt
      author {
        id
        email
        username
      }
    }
  }
`;

const DELETE_POST_MUTATION = gql`
  mutation DeletePost($id: ID!) {
    deletePost(id: $id) {
      id
      title
    }
  }
`;

@Injectable({
  providedIn: 'root'
})
export class PostService {
  constructor(private apollo: Apollo) {}

  getPosts() {
    return this.apollo.query<PostsResponse>({
      query: GET_POSTS_QUERY
    }).pipe(
      map(result => result.data.posts)
    );
  }

  getPost(id: string) {
    return this.apollo.query<PostResponse>({
      query: GET_POST_QUERY,
      variables: { id }
    }).pipe(
      map(result => result.data.post)
    );
  }

  createPost(input: {
    title: string;
    content: string;
    published?: boolean;
    categoryIds?: string[];
    tagIds?: string[];
  }) {
    return this.apollo.mutate<CreatePostResponse>({
      mutation: CREATE_POST_MUTATION,
      variables: { input },
      refetchQueries: [{ query: GET_POSTS_QUERY }]
    }).pipe(
      map(result => result.data?.createPost)
    );
  }

  updatePost(id: string, input: {
    title?: string;
    content?: string;
    published?: boolean;
    categoryIds?: string[];
    tagIds?: string[];
  }) {
    return this.apollo.mutate<UpdatePostResponse>({
      mutation: UPDATE_POST_MUTATION,
      variables: { id, input },
      refetchQueries: [{ query: GET_POSTS_QUERY }]
    }).pipe(
      map(result => result.data?.updatePost)
    );
  }

  deletePost(id: string) {
    return this.apollo.mutate({
      mutation: DELETE_POST_MUTATION,
      variables: { id },
      refetchQueries: [{ query: GET_POSTS_QUERY }]
    });
  }
}
